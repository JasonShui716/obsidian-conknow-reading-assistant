/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => ConknowReadingAssistant
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  serverUrl: "https://api.textin.com/ai/service/v1/pdf_to_markdown",
  textinApiId: "",
  textinApiSecret: ""
};
var ConknowReadingAssistant = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ConknowSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView)
        return;
      const editor = activeView.editor;
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const imageRegex = /!\[\[(.*?)\]\]/;
      const match = line.match(imageRegex);
      if (match) {
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790").setIcon("file-text").onClick(async () => {
            const imagePath = match[1].trim();
            await this.processImage(imagePath, editor, cursor.line);
          });
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("canvas:node-menu", (menu, node, canvas) => {
      var _a, _b, _c;
      console.log("Canvas menu triggered:", {
        nodeType: node == null ? void 0 : node.type,
        fileType: (_a = node == null ? void 0 : node.file) == null ? void 0 : _a.extension,
        isFile: (node == null ? void 0 : node.file) instanceof import_obsidian.TFile,
        node,
        canvas
      });
      if ((node == null ? void 0 : node.file) instanceof import_obsidian.TFile && ["png", "jpg", "jpeg", "gif", "bmp", "pdf"].includes((_b = node == null ? void 0 : node.file) == null ? void 0 : _b.extension)) {
        console.log("Node is an image file, adding menu item");
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790").setIcon("file-text").onClick(async () => {
            console.log("OCR menu item clicked");
            try {
              const imagePath = node.file.path;
              const ocrResult = await this.processImageForCanvas(imagePath);
              if (!ocrResult) {
                throw new Error("OCR \u5904\u7406\u5931\u8D25");
              }
              if (!node.canvas) {
                throw new Error("\u65E0\u6CD5\u83B7\u53D6 Canvas \u5B9E\u4F8B");
              }
              console.log("Creating node with OCR result");
              const minWidth = 200;
              const maxWidth = 600;
              const textLength = ocrResult.length;
              let width = Math.min(maxWidth, Math.max(minWidth, textLength * 10));
              let height = Math.round(width * 1.5);
              const textNode = node.canvas.createTextNode({
                text: ocrResult,
                pos: {
                  x: node.x + node.width + 50,
                  y: node.y
                },
                size: {
                  width,
                  height
                },
                focus: false
              });
              node.canvas.addNode(textNode);
              new import_obsidian.Notice("OCR \u7ED3\u679C\u8282\u70B9\u521B\u5EFA\u6210\u529F");
            } catch (error) {
              console.error("\u521B\u5EFA\u8282\u70B9\u5931\u8D25:", error);
              console.log("\u5F53\u524D\u73AF\u5883:", {
                node,
                canvas: node.canvas
              });
              new import_obsidian.Notice("\u521B\u5EFA\u8282\u70B9\u5931\u8D25: " + error.message);
            }
          });
        });
      } else {
        console.log("Node is not an image file or does not meet criteria:", {
          isFile: (node == null ? void 0 : node.file) instanceof import_obsidian.TFile,
          extension: (_c = node == null ? void 0 : node.file) == null ? void 0 : _c.extension
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("canvas:node-context-menu", (menu, node) => {
      var _a;
      console.log("Canvas context menu triggered:", {
        nodeType: node == null ? void 0 : node.type,
        fileType: (_a = node == null ? void 0 : node.file) == null ? void 0 : _a.extension,
        isFile: (node == null ? void 0 : node.file) instanceof import_obsidian.TFile,
        node
      });
    }));
    this.registerEvent(this.app.workspace.on("canvas:selection-menu", (menu, canvas) => {
      console.log("Canvas selection menu triggered");
      const selectedNodes = canvas == null ? void 0 : canvas.getSelectedNodes();
      console.log("Selected nodes:", selectedNodes);
    }));
  }
  async processImageForCanvas(imagePath) {
    const loadingNotice = new import_obsidian.Notice("\u6B63\u5728\u8FDB\u884C OCR \u89E3\u6790\uFF0C\u8BF7\u7A0D\u5019...", 0);
    try {
      const result = await this.sendToTextin(imagePath);
      loadingNotice.hide();
      new import_obsidian.Notice("OCR \u89E3\u6790\u5B8C\u6210");
      return result;
    } catch (error) {
      loadingNotice.hide();
      new import_obsidian.Notice("\u5904\u7406\u5931\u8D25\uFF1A" + error.message);
      return null;
    }
  }
  async processImage(imagePath, editor, line) {
    const loadingNotice = new import_obsidian.Notice("\u6B63\u5728\u8FDB\u884C OCR \u89E3\u6790\uFF0C\u8BF7\u7A0D\u5019...", 0);
    try {
      const result = await this.sendToTextin(imagePath);
      editor.replaceRange("\n" + result + "\n", { line: line + 1, ch: 0 }, { line: line + 1, ch: 0 });
      loadingNotice.hide();
      new import_obsidian.Notice("OCR \u89E3\u6790\u5B8C\u6210");
    } catch (error) {
      loadingNotice.hide();
      new import_obsidian.Notice("\u5904\u7406\u5931\u8D25\uFF1A" + error.message);
    }
  }
  async sendToTextin(imagePath) {
    if (!this.settings.textinApiId || !this.settings.textinApiSecret) {
      throw new Error("\u8BF7\u5148\u914D\u7F6E Textin API ID \u548C Secret");
    }
    const file = this.app.vault.getAbstractFileByPath(imagePath);
    if (!file) {
      throw new Error("\u627E\u4E0D\u5230\u56FE\u7247\u6587\u4EF6\uFF1A" + imagePath);
    }
    const arrayBuffer = await this.app.vault.readBinary(file);
    const headers = {
      "Content-Type": "application/octet-stream",
      "x-ti-app-id": this.settings.textinApiId,
      "x-ti-secret-code": this.settings.textinApiSecret
    };
    const response = await fetch(this.settings.serverUrl, {
      method: "POST",
      headers,
      body: arrayBuffer
    });
    if (!response.ok) {
      throw new Error("\u4E0A\u4F20\u5931\u8D25\uFF1A" + response.statusText);
    }
    const result = await response.json();
    if (result.code !== 200) {
      throw new Error("API \u8FD4\u56DE\u9519\u8BEF\uFF1A" + result.message);
    }
    return result.result.markdown;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ConknowSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Conknow\u9605\u8BFB\u52A9\u624B\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API \u5730\u5740").setDesc("Textin OCR API \u5730\u5740").addText((text) => text.setPlaceholder("\u8F93\u5165 API \u5730\u5740").setValue(this.plugin.settings.serverUrl).onChange(async (value) => {
      this.plugin.settings.serverUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API ID").setDesc("\u8F93\u5165\u60A8\u7684 Textin API ID").addText((text) => text.setPlaceholder("\u8F93\u5165 API ID").setValue(this.plugin.settings.textinApiId).onChange(async (value) => {
      this.plugin.settings.textinApiId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Secret").setDesc("\u8F93\u5165\u60A8\u7684 Textin API Secret").addText((text) => text.setPlaceholder("\u8F93\u5165 API Secret").setValue(this.plugin.settings.textinApiSecret).onChange(async (value) => {
      this.plugin.settings.textinApiSecret = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
