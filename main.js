/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => ConknowReadingAssistant
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  serverUrl: "https://api.textin.com/robot/v1.0/api/ocr",
  textinApiId: "",
  textinApiSecret: "",
  deepseekBaseUrl: "https://api.deepseek.com/v1",
  deepseekApiKey: "",
  deepseekModel: "deepseek-reasoner",
  deepseekSystemPrompt: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u9605\u8BFB\u52A9\u624B\uFF0C\u8BF7\u5E2E\u6211\u89E3\u8BFB\u4EE5\u4E0B\u6587\u672C\u5185\u5BB9\uFF0C\u5E76\u7ED9\u51FA\u4F60\u7684\u5206\u6790\u548C\u89C1\u89E3\uFF1A"
};
var ConknowSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Conknow\u9605\u8BFB\u52A9\u624B\u8BBE\u7F6E" });
    containerEl.createEl("h3", { text: "Textin OCR \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API \u5730\u5740").setDesc("Textin OCR API \u5730\u5740").addText((text) => text.setPlaceholder("\u8F93\u5165 API \u5730\u5740").setValue(this.plugin.settings.serverUrl).onChange(async (value) => {
      this.plugin.settings.serverUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API ID").setDesc("\u8F93\u5165\u60A8\u7684 Textin API ID").addText((text) => text.setPlaceholder("\u8F93\u5165 API ID").setValue(this.plugin.settings.textinApiId).onChange(async (value) => {
      this.plugin.settings.textinApiId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Secret").setDesc("\u8F93\u5165\u60A8\u7684 Textin API Secret").addText((text) => text.setPlaceholder("\u8F93\u5165 API Secret").setValue(this.plugin.settings.textinApiSecret).onChange(async (value) => {
      this.plugin.settings.textinApiSecret = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Deepseek AI \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API Base URL").setDesc("Deepseek API \u57FA\u7840\u5730\u5740").addText((text) => text.setPlaceholder("\u8F93\u5165 API \u57FA\u7840\u5730\u5740").setValue(this.plugin.settings.deepseekBaseUrl).onChange(async (value) => {
      this.plugin.settings.deepseekBaseUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("\u8F93\u5165\u60A8\u7684 Deepseek API Key").addText((text) => text.setPlaceholder("\u8F93\u5165 API Key").setValue(this.plugin.settings.deepseekApiKey).onChange(async (value) => {
      this.plugin.settings.deepseekApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u578B").setDesc("\u9009\u62E9\u4F7F\u7528\u7684 Deepseek \u6A21\u578B").addText((text) => text.setPlaceholder("\u8F93\u5165\u6A21\u578B\u540D\u79F0").setValue(this.plugin.settings.deepseekModel).onChange(async (value) => {
      this.plugin.settings.deepseekModel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u7CFB\u7EDF\u63D0\u793A\u8BCD").setDesc("\u8BBE\u7F6E\u4E0EAI\u5BF9\u8BDD\u7684\u7CFB\u7EDF\u63D0\u793A\u8BCD").addTextArea((text) => text.setPlaceholder("\u8F93\u5165\u7CFB\u7EDF\u63D0\u793A\u8BCD").setValue(this.plugin.settings.deepseekSystemPrompt).onChange(async (value) => {
      this.plugin.settings.deepseekSystemPrompt = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/canvas.ts
var addEdge = (canvas, edgeID, fromEdge, toEdge) => {
  if (!canvas)
    return;
  const data = canvas.getData();
  if (!data)
    return;
  canvas.importData({
    edges: [
      ...data.edges,
      {
        id: edgeID,
        fromNode: fromEdge.node.id,
        fromSide: fromEdge.side,
        toNode: toEdge.node.id,
        toSide: toEdge.side
      }
    ],
    nodes: data.nodes
  });
  canvas.requestFrame();
};
var createTextNode = (canvas, text, x, y, width, height) => {
  return canvas.createTextNode({
    text,
    pos: {
      x,
      y
    },
    size: {
      width,
      height
    },
    focus: false
  });
};
var calculateNodeDimensions = (textLength) => {
  const minWidth = 200;
  const maxWidth = 600;
  const width = Math.min(maxWidth, Math.max(minWidth, textLength * 10));
  const height = Math.round(width * 1.5);
  return { width, height };
};

// src/utils.ts
var randomHexString = (len) => {
  const t = [];
  for (let n = 0; n < len; n++) {
    t.push((16 * Math.random() | 0).toString(16));
  }
  return t.join("");
};

// src/main.ts
var ConknowReadingAssistant = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ConknowSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (!activeView)
        return;
      const editor = activeView.editor;
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const imageRegex = /!\[\[(.*?)\]\]/;
      const match = line.match(imageRegex);
      if (match) {
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790").setIcon("file-text").onClick(async () => {
            const imagePath = match[1].trim();
            await this.processImage(imagePath, editor, cursor.line);
          });
        });
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790\u5E76\u89E3\u8BFB").setIcon("brain").onClick(async () => {
            const imagePath = match[1].trim();
            await this.processImageWithAI(imagePath, editor, cursor.line);
          });
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("canvas:node-menu", (menu, node, canvas) => {
      var _a;
      if ((node == null ? void 0 : node.file) instanceof import_obsidian2.TFile && ["png", "jpg", "jpeg", "gif", "bmp", "pdf"].includes((_a = node == null ? void 0 : node.file) == null ? void 0 : _a.extension)) {
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790").setIcon("file-text").onClick(async () => {
            try {
              const imagePath = node.file.path;
              const ocrResult = await this.processImageForCanvas(imagePath);
              if (!ocrResult) {
                throw new Error("OCR \u5904\u7406\u5931\u8D25");
              }
              if (!node.canvas) {
                throw new Error("\u65E0\u6CD5\u83B7\u53D6 Canvas \u5B9E\u4F8B");
              }
              const { width, height } = calculateNodeDimensions(ocrResult.length);
              const textNode = createTextNode(node.canvas, ocrResult, node.x + node.width + 50, node.y, width, height);
              node.canvas.addNode(textNode);
              addEdge(node.canvas, randomHexString(16), {
                fromOrTo: "from",
                side: "right",
                node
              }, {
                fromOrTo: "to",
                side: "left",
                node: textNode
              });
              new import_obsidian2.Notice("OCR \u7ED3\u679C\u8282\u70B9\u521B\u5EFA\u6210\u529F");
            } catch (error) {
              console.error("\u521B\u5EFA\u8282\u70B9\u5931\u8D25:", error);
              new import_obsidian2.Notice("\u521B\u5EFA\u8282\u70B9\u5931\u8D25: " + error.message);
            }
          });
        });
        menu.addItem((item) => {
          item.setTitle("OCR\u89E3\u6790\u5E76\u89E3\u8BFB").setIcon("brain").onClick(async () => {
            try {
              const imagePath = node.file.path;
              const ocrResult = await this.processImageForCanvas(imagePath);
              if (!ocrResult) {
                throw new Error("OCR \u5904\u7406\u5931\u8D25");
              }
              if (!node.canvas) {
                throw new Error("\u65E0\u6CD5\u83B7\u53D6 Canvas \u5B9E\u4F8B");
              }
              const { width: ocrWidth, height: ocrHeight } = calculateNodeDimensions(ocrResult.length);
              const ocrNode = createTextNode(node.canvas, ocrResult, node.x + node.width + 50, node.y, ocrWidth, ocrHeight);
              node.canvas.addNode(ocrNode);
              addEdge(node.canvas, randomHexString(16), {
                fromOrTo: "from",
                side: "right",
                node
              }, {
                fromOrTo: "to",
                side: "left",
                node: ocrNode
              });
              new import_obsidian2.Notice("OCR \u7ED3\u679C\u8282\u70B9\u521B\u5EFA\u6210\u529F\uFF0C\u6B63\u5728\u8FDB\u884C AI \u89E3\u8BFB...");
              await this.createAIAnalysisNode(node.canvas, ocrNode, ocrResult);
            } catch (error) {
              console.error("\u521B\u5EFA\u8282\u70B9\u5931\u8D25:", error);
              new import_obsidian2.Notice("\u521B\u5EFA\u8282\u70B9\u5931\u8D25: " + error.message);
            }
          });
        });
      }
      if (node == null ? void 0 : node.text) {
        const models = [
          { name: "o1", value: "o1" },
          { name: "o1-mini", value: "o1-mini" },
          { name: "o1-preview", value: "o1-preview" },
          { name: "gpt-4o", value: "gpt-4o" },
          { name: "deepseek-chat", value: "deepseek-chat" },
          { name: "deepseek-reasoner", value: "deepseek-reasoner" }
        ];
        models.forEach((model) => {
          menu.addItem((item) => {
            item.setTitle(`AI\u89E3\u8BFB - ${model.name}`).setIcon(model.value === this.settings.deepseekModel ? "check" : "brain").onClick(async () => {
              try {
                if (!node.canvas) {
                  throw new Error("\u65E0\u6CD5\u83B7\u53D6 Canvas \u5B9E\u4F8B");
                }
                await this.createAIAnalysisNode(node.canvas, node, node.text, model.value);
              } catch (error) {
                console.error("\u521B\u5EFAAI\u89E3\u8BFB\u8282\u70B9\u5931\u8D25:", error);
                new import_obsidian2.Notice("\u521B\u5EFAAI\u89E3\u8BFB\u8282\u70B9\u5931\u8D25: " + error.message);
              }
            });
          });
        });
      }
    }));
  }
  async createAIAnalysisNode(canvas, sourceNode, text, modelOverride) {
    const aiResult = await this.sendToDeepseek(text, modelOverride);
    if (!aiResult) {
      throw new Error("AI \u89E3\u8BFB\u5931\u8D25");
    }
    const { width: aiWidth, height: aiHeight } = calculateNodeDimensions(aiResult.length);
    const aiNode = createTextNode(canvas, aiResult, sourceNode.x + sourceNode.width + 50, sourceNode.y, aiWidth, aiHeight);
    canvas.addNode(aiNode);
    addEdge(canvas, randomHexString(16), {
      fromOrTo: "from",
      side: "right",
      node: sourceNode
    }, {
      fromOrTo: "to",
      side: "left",
      node: aiNode
    });
    new import_obsidian2.Notice("AI \u89E3\u8BFB\u7ED3\u679C\u8282\u70B9\u521B\u5EFA\u6210\u529F");
  }
  async processImageForCanvas(imagePath) {
    const loadingNotice = new import_obsidian2.Notice("\u6B63\u5728\u8FDB\u884C OCR \u89E3\u6790\uFF0C\u8BF7\u7A0D\u5019...", 0);
    try {
      const result = await this.sendToTextin(imagePath);
      loadingNotice.hide();
      new import_obsidian2.Notice("OCR \u89E3\u6790\u5B8C\u6210");
      return result;
    } catch (error) {
      loadingNotice.hide();
      new import_obsidian2.Notice("\u5904\u7406\u5931\u8D25\uFF1A" + error.message);
      return null;
    }
  }
  async processImage(imagePath, editor, line) {
    const loadingNotice = new import_obsidian2.Notice("\u6B63\u5728\u8FDB\u884C OCR \u89E3\u6790\uFF0C\u8BF7\u7A0D\u5019...", 0);
    try {
      const result = await this.sendToTextin(imagePath);
      editor.replaceRange("\n" + result + "\n", { line: line + 1, ch: 0 }, { line: line + 1, ch: 0 });
      loadingNotice.hide();
      new import_obsidian2.Notice("OCR \u89E3\u6790\u5B8C\u6210");
    } catch (error) {
      loadingNotice.hide();
      new import_obsidian2.Notice("\u5904\u7406\u5931\u8D25\uFF1A" + error.message);
    }
  }
  async processImageWithAI(imagePath, editor, line) {
    const loadingNotice = new import_obsidian2.Notice("\u6B63\u5728\u8FDB\u884C OCR \u89E3\u6790\u548C AI \u89E3\u8BFB\uFF0C\u8BF7\u7A0D\u5019...", 0);
    try {
      const ocrResult = await this.sendToTextin(imagePath);
      const aiResult = await this.sendToDeepseek(ocrResult);
      editor.replaceRange("\n" + ocrResult + "\n\n**AI\u89E3\u8BFB\uFF1A**\n" + aiResult + "\n", { line: line + 1, ch: 0 }, { line: line + 1, ch: 0 });
      loadingNotice.hide();
      new import_obsidian2.Notice("OCR \u89E3\u6790\u548C AI \u89E3\u8BFB\u5B8C\u6210");
    } catch (error) {
      loadingNotice.hide();
      new import_obsidian2.Notice("\u5904\u7406\u5931\u8D25\uFF1A" + error.message);
    }
  }
  async sendToTextin(imagePath) {
    if (!this.settings.textinApiId || !this.settings.textinApiSecret) {
      throw new Error("\u8BF7\u5148\u914D\u7F6E Textin API ID \u548C Secret");
    }
    const file = this.app.vault.getAbstractFileByPath(imagePath);
    if (!file) {
      throw new Error("\u627E\u4E0D\u5230\u56FE\u7247\u6587\u4EF6\uFF1A" + imagePath);
    }
    const arrayBuffer = await this.app.vault.readBinary(file);
    const headers = {
      "Content-Type": "application/octet-stream",
      "x-ti-app-id": this.settings.textinApiId,
      "x-ti-secret-code": this.settings.textinApiSecret
    };
    const response = await fetch(this.settings.serverUrl, {
      method: "POST",
      headers,
      body: arrayBuffer
    });
    if (!response.ok) {
      throw new Error("\u4E0A\u4F20\u5931\u8D25\uFF1A" + response.statusText);
    }
    const result = await response.json();
    if (result.code !== 200) {
      throw new Error("API \u8FD4\u56DE\u9519\u8BEF\uFF1A" + result.message);
    }
    return result.result.markdown;
  }
  convertMathFormula(text) {
    text = text.replace(/\\\[\s*([\s\S]*?)\s*\\\]/g, "$$\n$1\n$$");
    text = text.replace(/\\\((.*?)\\\)/g, "$$$1$$");
    text = text.replace(/\$\$([\s\S]*?)\$\$/g, (match, formula) => {
      formula = formula.trim();
      return "\n$$\n" + formula + "\n$$\n";
    });
    return text;
  }
  async sendToDeepseek(text, modelOverride) {
    if (!this.settings.deepseekApiKey) {
      throw new Error("\u8BF7\u5148\u914D\u7F6E Deepseek API Key");
    }
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.settings.deepseekApiKey}`
    };
    const body = {
      model: modelOverride || this.settings.deepseekModel,
      messages: [
        {
          role: "user",
          content: this.settings.deepseekSystemPrompt + "\n\n" + text
        }
      ]
    };
    console.log("\u53D1\u9001\u5230 Deepseek \u7684\u8BF7\u6C42:", {
      url: `${this.settings.deepseekBaseUrl}/chat/completions`,
      headers: { ...headers, "Authorization": "Bearer ****" },
      body
    });
    const response = await fetch(`${this.settings.deepseekBaseUrl}/chat/completions`, {
      method: "POST",
      headers,
      body: JSON.stringify(body)
    });
    console.log("Deepseek API \u54CD\u5E94\u72B6\u6001:", response.status, response.statusText);
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Deepseek API \u9519\u8BEF\u54CD\u5E94:", errorText);
      throw new Error("API \u8BF7\u6C42\u5931\u8D25\uFF1A" + response.statusText + "\n" + errorText);
    }
    const responseText = await response.text();
    console.log("Deepseek API \u539F\u59CB\u54CD\u5E94:", responseText);
    try {
      const result = JSON.parse(responseText);
      if (!result.choices || !result.choices[0] || !result.choices[0].message) {
        console.error("Deepseek API \u8FD4\u56DE\u683C\u5F0F\u5F02\u5E38:", result);
        throw new Error("API \u8FD4\u56DE\u683C\u5F0F\u9519\u8BEF");
      }
      return this.convertMathFormula(result.choices[0].message.content);
    } catch (error) {
      console.error("\u89E3\u6790 Deepseek API \u54CD\u5E94\u5931\u8D25:", error);
      throw error;
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
